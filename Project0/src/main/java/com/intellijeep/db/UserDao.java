package com.intellijeep.db;

import com.intellijeep.config.ConnectionUtil;
import com.intellijeep.model.AccountType;
import com.intellijeep.model.User;
import com.intellijeep.util.IntelliJeepArrayList;

import java.sql.*;

public class UserDao implements GenericDao<User> {

    /**
     * Singleton design pattern
     */
    private static UserDao instance;

    private UserDao(){}

    static UserDao getInstance() {
        if(instance == null) {
            instance = new UserDao();
        }

        return instance;
    }
    /*
    In save function, rather than return number of updated rows, see if it can return
    the serial userID created.

    Create the session from ConnectionUtil
    Create prepared statement for inserting new user
    Return user's id
     */

    @Override
    public int save(User User) {

        int key = -1;
        //All fields merged into User table bc all functionally dependent on userID
        String query = "insert into app_user (username, password, type) values(?,?,?)";
        try (Connection conn = ConnectionUtil.getConnection("dev")) {
            PreparedStatement ps = conn.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
            //ps = conn.prepareStatement(queryCreationUtility.createUserInsertionQuery(User,ps), Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, User.getUsername());
            ps.setString(2, User.getPassword());
            ps.setInt(3, User.getAccountType().ordinal());

            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            if(rs.next()) {
                key = rs.getInt(1); //Column index 1 is the autogenerated id
            }
            ps.close();
            return key;

        } catch (SQLException e) {
            e.printStackTrace();
            return key;
        }
    }


    @Override
    public User getByID(Integer id) {

        String query = "Select * from app_user where id = ?";
        try (Connection conn = ConnectionUtil.getConnection("dev")) {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, id);

            ResultSet rs = ps.executeQuery();
            if(rs.next()) {
                return new User(
                    rs.getInt("id"),
                    rs.getString("username"),
                    rs.getString("password"),
                    AccountType.convert(rs.getInt("type"))
                );

            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return null;
    }

    public User getByUsername(String username) {

        String query = "Select * from app_user where username = ?";
        try (Connection conn = ConnectionUtil.getConnection("dev")) {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, username);

            ResultSet rs = ps.executeQuery();
            if(rs.next()) {
                return new User(
                    rs.getInt("id"),
                    rs.getString("username"),
                    rs.getString("password"),
                    AccountType.convert(rs.getInt("type"))
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return null;
    }

    public User login(String username, String password) {
        String query = "Select * from app_user where username = ? and password = ?";
        try (Connection conn = ConnectionUtil.getConnection("dev")) {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setString(1, username);
            ps.setString(2, password);

            ResultSet rs = ps.executeQuery();
            if(rs.next()) {
                return new User(
                    rs.getInt("id"),
                    rs.getString("username"),
                    rs.getString("password"),
                    AccountType.convert(rs.getInt("type"))
                );
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return null;
    }

    @Override
    public IntelliJeepArrayList<User> getAll() {
        return null;
    }

    @Override
    public Boolean remove(Integer id) {
        return null;
    }

    @Override
    public Boolean update(User User) {
        String query = "update app_user set type = ? where id = ?";
        try (Connection conn = ConnectionUtil.getConnection("dev")) {
            PreparedStatement ps = conn.prepareStatement(query);
            ps.setInt(1, User.getAccountType().ordinal());
            ps.setInt(2, User.getUserID());
            if(ps.executeUpdate() == 1){
                return true;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    @Override
    public int updateAll(IntelliJeepArrayList<User> collection) {
        return 0;
    }
}
