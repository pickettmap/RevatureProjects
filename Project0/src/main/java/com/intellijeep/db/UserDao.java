package com.intellijeep.db;

import com.intellijeep.config.ConnectionUtil;
import com.intellijeep.model.User;
import com.intellijeep.util.IntelliJeepArrayList;

import java.sql.*;

public class UserDao implements GenericDao<User> {

    /**
     * Singleton design pattern
     */
    private static UserDao instance;

    private UserDao(){}

    static UserDao getInstance() {
        if(instance == null) {
            instance = new UserDao();
        }

        return instance;
    }

    /*
    In save function, rather than return number of updated rows, see if it can return
    the serial userID created.

    Create the session from ConnectionUtil
    Create prepared statement for inserting new user
    Return user's id
     */

    @Override
    public int save(User user) {

        int key = -1;
        //TODO: Ask robert about placement for query
        //All fields merged into User table bc all functionally dependent on userID
        String defaultQuery = "insert into user_table values(?,?,?,?,?,?,?,?,?,?,?)";

        try (Connection conn = ConnectionUtil.getConnection(".dev.")) {

            //TODO: Add accountType relationship
            PreparedStatement ps = conn.prepareStatement(defaultQuery, Statement.RETURN_GENERATED_KEYS);
            ps.setString(1, user.getAccountData().getUsername());
            ps.setString(2, user.getAccountData().getPassword());
            ps.setString(3, user.getPersonalInfo().getFirstName());
            ps.setString(4, user.getPersonalInfo().getLastName());
            ps.setString(5, user.getPersonalInfo().getEmail());
            ps.setString(6, user.getPersonalInfo().getPhoneNumber());
            ps.setString(7, user.getLocationData().getStreetAddress());
            ps.setString(8, user.getLocationData().getCity());
            ps.setString(9, user.getLocationData().getState());
            ps.setString(10, user.getLocationData().getZipCode());
            //add another spot here for account type

            ps.executeUpdate();

            ResultSet rs = ps.getGeneratedKeys();
            if(rs.next()) {
                key = rs.getInt(1); //Column index 1 is the autogenerated id
            }
            return key;

        } catch (SQLException throwables) {
            throwables.printStackTrace();
            return key;
        }
    }


    @Override
    public User getByID(Integer id) {
        return null;
    }

    @Override
    public IntelliJeepArrayList<User> getAll() {
        return null;
    }

    @Override
    public Boolean remove(Integer id) {
        return null;
    }

    @Override
    public Boolean update(User user) {
        return null;
    }

    @Override
    public int updateAll(IntelliJeepArrayList<User> collection) {
        return 0;
    }
}
